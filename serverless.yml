# <DESCRIBE SERVICE>
service: wild-rydes-ride-requests


plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  # - serverless-apigateway-plugin

custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"
  profile: "${opt:aws-profile, env:AWS_PROFILE, env:AWS_DEFAULT_PROFILE, 'default'}"
  log_level: "${env:LOG_LEVEL, 'INFO'}"
  website_s3_bucket_export: "wild-rydes-website-${self:custom.stage}-StaticSiteS3BucketName"

  promo_discount_stack_name: "wild-rydes-promo-discount-${self:custom.stage}"
  promo_discount_endpoint: "${cf:${self:custom.promo_discount_stack_name}.WildRydesGetPromoDiscountUrl}"

  # NOTE: Because Fn::ImportValue does not work in function events(?) we use
  # the builtin cf: lookup.  We should switch to this everywhere.
  auth_stack_name: "wild-rydes-auth-${self:custom.stage}"
  user_pool_arn: "${cf:${self:custom.auth_stack_name}.UserPoolArn}"

  xray_enabled: "${env:XRAY_ENABLED, 'false'}"

  iopipe_token: "${env:IOPIPE_TOKEN, ''}"
  iopipe_profiler_enabled: "${env:IOPIPE_PROFILER_ENABLED, 'false'}"
  iopipe_tracing_enabled: "${env:IOPIPE_TRACING_ENABLED, 'false'}"

  pythonRequirements:
    # if using pyenv, make sure virtualenv was initialized to create python3.6
    # `pyenv virtualenv -p python3.6 <VERSION> <VIRTUALENV>`
    dockerizePip: false


provider:
  name: aws
  profile: ${self:custom.profile}
  stage: ${self:custom.stage}
  runtime: python3.6
  environment:
    LOG_LEVEL: ${self:custom.log_level}
    IOPIPE_TOKEN: '${self:custom.iopipe_token}'
    IOPIPE_PROFILER_ENABLED: '${self:custom.iopipe_profiler_enabled}'
    IOPIPE_TRACING_ENABLED: '${self:custom.iopipe_tracing_enabled}'
    XRAY_ENABLED: '${self:custom.xray_enabled}'
  tracing: '${self:custom.xray_enabled}'

functions:
  RequestRide:
    handler: handlers/request_ride.handler
    description: "Request a ride.."
    memorySize: 128
    timeout: 30
    environment:
      DYNAMODB_TABLE:
        Ref: RidesTable
      PROMO_DISCOUNT_ENDPOINT: "${self:custom.promo_discount_endpoint}"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Scan
        Resource:
          Fn::GetAtt:
            - RidesTable
            - Arn
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
    events:
      - http:
          path: /ride
          method: post
          authorizer:
            arn: "${self:custom.user_pool_arn}"
          cors: true
#      - http:
#          path: /ride
#          method: options
#          integration: mock
#          cors: true

  UpdateConfig:
    handler: handlers/update_backend_config.handler
    description: "Updates the backend location on the frontend."
    memorySize: 128
    timeout: 30
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:PutObjectAcl"
          - "s3:PutObjectVersionAcl"
          - "s3:DeleteObject"
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Fn::ImportValue: "${self:custom.website_s3_bucket_export}"
              - '/*'


resources:
  Parameters:
    # NOTE: While we don't use this directly due to a limitation in SLS
    # handling CFN functions in function events, it's good for us to define
    # the data we need from other stacks.  It effectively defines the input
    # interface to the service.
    UserPoolArn:
      Type: String
      Description: "ARN of Wild Rydes Cognito auth pool"
      Default: "${self:custom.user_pool_arn}"


  Resources:
    RidesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: RideId
            AttributeType: S
        KeySchema:
          - AttributeName: RideId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    UpdateConfig:
      Type: "Custom::ConfigFile"
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - UpdateConfigLambdaFunction
            - Arn
        Bucket:
          Fn::ImportValue: "${self:custom.website_s3_bucket_export}"
        InvokeUrl:
          Fn::Join:
            - ""
            - - "https://"
              - Ref: ApiGatewayRestApi
              - ".execute-api."
              - Ref: AWS::Region
              - ".amazonaws.com/${self:custom.stage}"


  Outputs:
    WildRydesApiInvokeUrl:
      Description: URL for the deployed wild rydes API
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - Ref: AWS::Region
            - ".amazonaws.com/${self:custom.stage}"
      Export:
        Name: "${self:service}-${self:provider.stage}-WildRydesApiUrl"

